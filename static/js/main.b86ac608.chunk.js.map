{"version":3,"sources":["DigitButton.js","OperationButton.js","App.js","reportWebVitals.js","index.js"],"names":["DigitButton","dispatch","digit","onClick","type","ACTIONS","ADD_DIGIT","payload","OperationButton","operation","CHOOSE_OPERATION","CLEAR","DELETE_DIGIT","EVALUATE","reducer","state","overwrite","currentOperand","includes","previousOperand","evaluate","customElements","length","slice","prev","parseFloat","curr","isNaN","computation","toString","App","useReducer","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b86ac608.chunk.js","sourcesContent":["import { ACTIONS } from \"./App\"\n\nexport default function DigitButton({dispatch, digit}){\n    return <button onClick={() => { dispatch({type: ACTIONS.ADD_DIGIT, payload: { digit }}) }}>{digit}</button>\n}","import { ACTIONS } from \"./App\"\n\nexport default function OperationButton({dispatch, operation}){\n    return <button onClick={() => { dispatch({type: ACTIONS.CHOOSE_OPERATION, payload: { operation }}) }}>{operation}</button>\n}","import { useReducer } from 'react';\nimport DigitButton from \"./DigitButton\"\nimport OperationButton from \"./OperationButton\"\nimport './style.css';\n\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CHOOSE_OPERATION: \"choose-operation\",\n  CLEAR: 'clear',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate'\n}\n\nfunction reducer(state, { type, payload }){\n  switch (type) {\n    case ACTIONS.ADD_DIGIT:\n      if(state.overwrite) {\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false\n        }\n      }\n      if(payload.digit === \"0\" && state.currentOperand === \"0\") return state\n      if(payload.digit === \".\" && state.currentOperand?.includes(\".\")) return state\n\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`\n      }\n    \n    case ACTIONS.CLEAR:\n      return {}\n\n    case ACTIONS.CHOOSE_OPERATION:\n      if(state.currentOperand == null && state.previousOperand == null) {\n        return state\n      }\n\n      if(state.currentOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n        }\n      }\n\n      if(state.previousOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null\n        }\n      }\n\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        operation: payload.operation,\n        customElements: null\n      }\n\n    case ACTIONS.DELETE_DIGIT:\n      if(state.overwrite){\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null\n        }\n      }\n\n      if(state.currentOperand == null) return state\n\n      if(state.currentOperand.length === 1)\n      {\n        return {\n          ...state,\n          currentOperand: null\n        }\n      }\n\n      return {\n        ...state,\n        currentOperand: state.currentOperand.slice(0, -1)\n      }\n  \n    case ACTIONS.EVALUATE:\n      if(state.operation ==  null || state.currentOperand == null || state.previousOperand == null) {\n        return state\n      }\n      \n      return {\n        ...state,\n        overwrite: true,\n        previousOperand: null,\n        operation: null,\n        currentOperand: evaluate(state)\n      }\n\n    default:\n      break;\n  }\n}\n\nfunction evaluate({currentOperand, previousOperand, operation})\n{\n  const prev = parseFloat(previousOperand)\n  const curr = parseFloat(currentOperand)\n  if(isNaN(prev) || isNaN(curr)) return \"\"\n  let computation = \"\"\n  switch (operation) {\n    case \"+\":\n      computation = prev + curr\n      break;\n    case \"-\":\n      computation = prev - curr\n      break;\n    case \"*\":\n      computation = prev * curr\n    break;\n    case \"รท\":\n      computation = prev / curr\n    break;\n  \n    default:\n      break;\n  }\n\n  return computation.toString()\n}\n\nfunction App() {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(reducer, {})\n\n  // dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit: 1 }})\n\n  return (\n    <div className=\"calculette-grid\">\n      <div className=\"output\">\n        <div className=\"operand-preview\">{ previousOperand } {operation}</div>\n        <div className=\"operand-current\">{ currentOperand }</div>\n      </div>\n      <button className=\"span-two\" onClick={() => {dispatch({type: ACTIONS.CLEAR})}}>AC</button>\n      <button onClick={() => {dispatch({type: ACTIONS.DELETE_DIGIT})}}>DEL</button>\n      <OperationButton operation='รท' dispatch={dispatch} />\n      <DigitButton digit='1' dispatch={dispatch} />\n      <DigitButton digit='2' dispatch={dispatch} />\n      <DigitButton digit='3' dispatch={dispatch} />\n      <OperationButton operation='*' dispatch={dispatch} />\n      <DigitButton digit='4' dispatch={dispatch} />\n      <DigitButton digit='5' dispatch={dispatch} />\n      <DigitButton digit='6' dispatch={dispatch} />\n      <OperationButton operation='+' dispatch={dispatch} />\n      <DigitButton digit='7' dispatch={dispatch} />\n      <DigitButton digit='8' dispatch={dispatch} />\n      <DigitButton digit='9' dispatch={dispatch} />\n      <OperationButton operation='-' dispatch={dispatch} />\n      <DigitButton digit='.' dispatch={dispatch} />\n      <DigitButton digit='0' dispatch={dispatch} />\n      <button className=\"span-two\" onClick={() => dispatch({ type: ACTIONS.EVALUATE })}>=</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}